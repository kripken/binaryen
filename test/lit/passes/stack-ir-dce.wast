;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.

;; RUN: wasm-opt %s --generate-stack-ir --optimize-stack-ir -all --print-stack-ir | filecheck %s
;; Also verify we roundtrip the output here properly.
;; RUN: wasm-opt %s --generate-stack-ir --optimize-stack-ir -all --roundtrip --print | filecheck %s --check-prefix=ROUNDTRIP

(module
  ;; CHECK:      (func $drop-unreachable (type $1) (result i32)
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  unreachable
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $drop-unreachable (type $1) (result i32)
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  (func $drop-unreachable (result i32)
    ;; This drop can be removed.
    (drop
      (call $drop-unreachable)
    )
    (unreachable)
  )

  ;; CHECK:      (func $drop-tuple-unreachable (type $2) (result i32 i32)
  ;; CHECK-NEXT:  call $drop-tuple-unreachable
  ;; CHECK-NEXT:  unreachable
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $drop-tuple-unreachable (type $2) (result i32 i32)
  ;; ROUNDTRIP-NEXT:  (local $0 (tuple i32 i32))
  ;; ROUNDTRIP-NEXT:  (local.set $0
  ;; ROUNDTRIP-NEXT:   (call $drop-tuple-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (tuple.extract 2 0
  ;; ROUNDTRIP-NEXT:    (local.get $0)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (tuple.extract 2 1
  ;; ROUNDTRIP-NEXT:    (local.get $0)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  (func $drop-tuple-unreachable (result i32 i32)
    ;; This tuple drop can be removed.
    (tuple.drop 2
      (call $drop-tuple-unreachable)
    )
    (unreachable)
  )

  ;; CHECK:      (func $drop-unreachable-sequence (type $1) (result i32)
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  unreachable
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $drop-unreachable-sequence (type $1) (result i32)
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  (func $drop-unreachable-sequence (result i32)
    ;; These three drops can be removed.
    (drop
      (call $drop-unreachable)
    )
    (drop
      (call $drop-unreachable)
    )
    (drop
      (call $drop-unreachable)
    )
    (unreachable)
    ;; All of this from here is in unreachable code, and can be removed.
    (drop
      (call $drop-unreachable)
    )
    (drop
      (call $drop-unreachable)
    )
    (drop
      (call $drop-unreachable)
    )
  )

  ;; CHECK:      (func $drop-sequence-reachable (type $0)
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  drop
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  drop
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  drop
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $drop-sequence-reachable (type $0)
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  (func $drop-sequence-reachable
    ;; These three drops must remain, as there is no unreachable code after
    ;; them.
    (drop
      (call $drop-unreachable)
    )
    (drop
      (call $drop-unreachable)
    )
    (drop
      (call $drop-unreachable)
    )
  )

  ;; CHECK:      (func $drop-br (type $0)
  ;; CHECK-NEXT:  block $out
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   drop
  ;; CHECK-NEXT:   i32.const 1
  ;; CHECK-NEXT:   br_if $out
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   br $out
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $drop-br (type $0)
  ;; ROUNDTRIP-NEXT:  (block $label$1
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (br_if $label$1
  ;; ROUNDTRIP-NEXT:    (i32.const 1)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (br $label$1)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  (func $drop-br
    ;; A br is also an opportunity to optimize away drops, but not a br_if.
    (block $out
      (drop
        (call $drop-unreachable)
      )
      (br_if $out
        (i32.const 1)
      )
      (drop
        (call $drop-unreachable)
      )
      (br $out)
    )
  )

  ;; CHECK:      (func $unreachable (type $1) (result i32)
  ;; CHECK-NEXT:  unreachable
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $unreachable (type $1) (result i32)
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  (func $unreachable (result i32)
    ;; An unreachable with nothing before it. Check we do not error here.
    (unreachable)
  )

  ;; CHECK:      (func $unreachable-non-drop (type $0)
  ;; CHECK-NEXT:  call $unreachable-non-drop
  ;; CHECK-NEXT:  unreachable
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $unreachable-non-drop (type $0)
  ;; ROUNDTRIP-NEXT:  (call $unreachable-non-drop)
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  (func $unreachable-non-drop
    ;; An unreachable with something other than a drop before it. Check we do
    ;; not error here.
    (call $unreachable-non-drop)
    (unreachable)
  )

  ;; CHECK:      (func $control-flow (type $0)
  ;; CHECK-NEXT:  i32.const 1
  ;; CHECK-NEXT:  if
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   unreachable
  ;; CHECK-NEXT:  else
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   drop
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $control-flow (type $0)
  ;; ROUNDTRIP-NEXT:  (if
  ;; ROUNDTRIP-NEXT:   (i32.const 1)
  ;; ROUNDTRIP-NEXT:   (then
  ;; ROUNDTRIP-NEXT:    (drop
  ;; ROUNDTRIP-NEXT:     (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:    (unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (else
  ;; ROUNDTRIP-NEXT:    (drop
  ;; ROUNDTRIP-NEXT:     (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  (func $control-flow
    ;; We can only remove the drop in the arm with the unreachable.
    (if
      (i32.const 1)
      (then
        (drop
          (call $drop-unreachable)
        )
        (unreachable)
      )
      (else
        (drop
          (call $drop-unreachable)
        )
      )
    )
  )

  ;; CHECK:      (func $control-flow-flip (type $0)
  ;; CHECK-NEXT:  i32.const 1
  ;; CHECK-NEXT:  if
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   drop
  ;; CHECK-NEXT:  else
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   unreachable
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $control-flow-flip (type $0)
  ;; ROUNDTRIP-NEXT:  (if
  ;; ROUNDTRIP-NEXT:   (i32.const 1)
  ;; ROUNDTRIP-NEXT:   (then
  ;; ROUNDTRIP-NEXT:    (drop
  ;; ROUNDTRIP-NEXT:     (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (else
  ;; ROUNDTRIP-NEXT:    (drop
  ;; ROUNDTRIP-NEXT:     (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:    (unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  (func $control-flow-flip
    ;; We can only remove the drop in the arm with the unreachable.
    (if
      (i32.const 1)
      (then
        (drop
          (call $drop-unreachable)
        )
      )
      (else
        (drop
          (call $drop-unreachable)
        )
        (unreachable)  ;; this moved
      )
    )
  )

  ;; CHECK:      (func $control-flow-blocks (type $3) (param $x i32)
  ;; CHECK-NEXT:  block $a
  ;; CHECK-NEXT:   local.get $x
  ;; CHECK-NEXT:   br_if $a
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   drop
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT:  block $b
  ;; CHECK-NEXT:   local.get $x
  ;; CHECK-NEXT:   br_if $b
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   drop
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT:  block $c
  ;; CHECK-NEXT:   local.get $x
  ;; CHECK-NEXT:   br_if $c
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   unreachable
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $control-flow-blocks (type $3) (param $x i32)
  ;; ROUNDTRIP-NEXT:  (block $label$1
  ;; ROUNDTRIP-NEXT:   (br_if $label$1
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (block $label$2
  ;; ROUNDTRIP-NEXT:   (br_if $label$2
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (block $label$3
  ;; ROUNDTRIP-NEXT:   (br_if $label$3
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  (func $control-flow-blocks (param $x i32)
    ;; We can only remove drops inside the last block, which has an unreachable.
    (block $a
      ;; Use br_ifs to keep the blocks alive through other opts.
      (br_if $a
        (local.get $x)
      )
      (drop
        (call $drop-unreachable)
      )
    )
    (block $b
      (br_if $b
        (local.get $x)
      )
      (drop
        (call $drop-unreachable)
      )
    )
    (block $c
      (br_if $c
        (local.get $x)
      )
      (drop
        (call $drop-unreachable)
      )
      (unreachable)
    )
  )

  ;; CHECK:      (func $many-drop-unreachable (type $1) (result i32)
  ;; CHECK-NEXT:  i32.const 1
  ;; CHECK-NEXT:  if (result i32)
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   unreachable
  ;; CHECK-NEXT:  else
  ;; CHECK-NEXT:   call $drop-unreachable
  ;; CHECK-NEXT:   unreachable
  ;; CHECK-NEXT:  end
  ;; CHECK-NEXT:  call $drop-unreachable
  ;; CHECK-NEXT:  unreachable
  ;; CHECK-NEXT: )
  ;; ROUNDTRIP:      (func $many-drop-unreachable (type $1) (result i32)
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (if (result i32)
  ;; ROUNDTRIP-NEXT:    (i32.const 1)
  ;; ROUNDTRIP-NEXT:    (then
  ;; ROUNDTRIP-NEXT:     (drop
  ;; ROUNDTRIP-NEXT:      (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:     )
  ;; ROUNDTRIP-NEXT:     (unreachable)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:    (else
  ;; ROUNDTRIP-NEXT:     (drop
  ;; ROUNDTRIP-NEXT:      (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:     )
  ;; ROUNDTRIP-NEXT:     (unreachable)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (call $drop-unreachable)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  (func $many-drop-unreachable (result i32)
    ;; Two drop-unreachables in an if. The drop on the if can also be removed.
    (drop
      (if (result i32)
        (i32.const 1)
        (then
          (drop
            (call $drop-unreachable)
          )
          (unreachable)
        )
        (else
          (drop
            (call $drop-unreachable)
          )
          (unreachable)
        )
      )
    )
    ;; Two more outside the if.
    (drop
      (call $drop-unreachable)
    )
    (unreachable)
    (drop
      (call $drop-unreachable)
    )
    (unreachable)
  )
)
