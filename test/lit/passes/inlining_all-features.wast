;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: foreach %s %t wasm-opt --inlining --all-features -S -o - | filecheck %s

(module
  ;; CHECK:      (type $0 (func))

  ;; CHECK:      (type $1 (func (result funcref)))

  ;; CHECK:      (elem declare func $foo)

  ;; CHECK:      (export "ref_func_test" (func $ref_func_test))
  (export "ref_func_test" (func $ref_func_test))

  ;; $foo should not be removed after being inlined, because there is 'ref.func'
  ;; instruction that refers to it
  ;; CHECK:      (func $foo (type $0)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $foo)

  ;; CHECK:      (func $ref_func_test (type $1) (result funcref)
  ;; CHECK-NEXT:  (block
  ;; CHECK-NEXT:   (block $__inlined_func$foo
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (ref.func $foo)
  ;; CHECK-NEXT: )
  (func $ref_func_test (result funcref)
    (call $foo)
    (ref.func $foo)
  )
)

(module
 ;; a function reference in a global's init should be noticed, and prevent us
 ;; from removing an inlined function

 ;; CHECK:      (type $0 (func (result i32)))

 ;; CHECK:      (global $global$0 (mut funcref) (ref.func $0))
 (global $global$0 (mut funcref) (ref.func $0))

 ;; CHECK:      (func $0 (type $0) (result i32)
 ;; CHECK-NEXT:  (i32.const 1337)
 ;; CHECK-NEXT: )
 (func $0 (result i32)
  (i32.const 1337)
 )

 ;; CHECK:      (func $1 (type $0) (result i32)
 ;; CHECK-NEXT:  (block $__inlined_func$0 (result i32)
 ;; CHECK-NEXT:   (i32.const 1337)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $1 (result i32)
  (call $0)
 )
)

(module
 ;; a function reference in the start should be noticed, and prevent us
 ;; from removing an inlined function

 ;; CHECK:      (type $0 (func))

 ;; CHECK:      (start $0)
 (start $0)

 ;; CHECK:      (func $0 (type $0)
 ;; CHECK-NEXT:  (nop)
 ;; CHECK-NEXT: )
 (func $0
  (nop)
 )

 ;; CHECK:      (func $1 (type $0)
 ;; CHECK-NEXT:  (block $__inlined_func$0
 ;; CHECK-NEXT:   (nop)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $1
  (call $0)
 )
)

;; inline a return_call_ref
(module
 ;; CHECK:      (type $none_=>_none (func))
 (type $none_=>_none (func))

 ;; CHECK:      (export "func_36_invoker" (func $1))
 (export "func_36_invoker" (func $1))

 (func $0
  (return_call_ref $none_=>_none
   (ref.null $none_=>_none)
  )
 )
 ;; CHECK:      (func $1 (type $none_=>_none)
 ;; CHECK-NEXT:  (block $__inlined_func$0
 ;; CHECK-NEXT:   (block ;; (replaces unreachable CallRef we can't emit)
 ;; CHECK-NEXT:    (drop
 ;; CHECK-NEXT:     (ref.null nofunc)
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:    (unreachable)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $1
  (call $0)
 )
)

;; handle non-nullable parameter types (which turn into local types after
;; inlining)
(module
 (func $0 (param $non-null (ref func)) (result (ref func))
  (local.get $non-null)
 )

 ;; CHECK:      (type $0 (func (result (ref func))))

 ;; CHECK:      (elem declare func $1)

 ;; CHECK:      (func $1 (type $0) (result (ref func))
 ;; CHECK-NEXT:  (local $0 (ref func))
 ;; CHECK-NEXT:  (block $__inlined_func$0 (result (ref func))
 ;; CHECK-NEXT:   (local.set $0
 ;; CHECK-NEXT:    (ref.func $1)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $1 (result (ref func))
  (call $0
   (ref.func $1)
  )
 )
)

;; New testcase, to reduce. fails with PASS_DEBUG=1
(module
 (type $0 (sub (shared (struct (field (mut (ref null (shared array))))))))
 (rec
  (type $1 (sub (shared (array (ref null $1)))))
  (type $2 (sub (shared (func (param (ref $2)) (result i64)))))
  (type $3 (sub (struct (field (mut (ref $1))))))
 )
 (rec
  (type $4 (shared (func (param arrayref f64))))
  (type $5 (shared (struct (field (ref null (shared extern))) (field i64) (field f32) (field (mut (ref (shared i31)))) (field (mut f32)))))
  (type $6 (struct (field (mut (ref null $2)))))
  (type $7 (shared (struct (field (mut i8)) (field (mut (ref null $5))) (field (mut i8)) (field i32) (field i8) (field (ref $11)))))
  (type $8 (sub (struct (field (mut i16)) (field (mut f32)) (field (ref (shared func))) (field (mut f32)) (field (ref null $11)))))
  (type $9 (sub (shared (array (ref null (shared eq))))))
  (type $10 (sub (array i8)))
  (type $11 (sub (shared (struct (field (ref null $0)) (field i8) (field i16)))))
  (type $12 (sub $8 (struct (field (mut i16)) (field (mut f32)) (field (ref $2)) (field (mut f32)) (field (ref null (shared none))))))
  (type $13 (sub final $0 (shared (struct (field (mut (ref null (shared array)))) (field (mut i8))))))
  (type $14 (sub final $9 (shared (array (ref null (shared none))))))
 )
 (type $15 (func))
 (type $16 (func (result (ref null $11))))
 (type $17 (func (param arrayref) (result (ref null $11))))
 (tag $tag$0)
 (func $0 (result (ref null $11))
  (unreachable)
 )
 (func $1 (param $0 arrayref) (result (ref null $11))
  (try $label$3 (result (ref $11))
   (do
    (return_call $0)
   )
   (catch $tag$0
    (struct.new_default $11)
   )
  )
 )
)

