;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt -all --gufa -S -o - | filecheck %s

;; Test optimizations for parallel type hierarchies (like objects and their
;; vtables

(module
  (rec
    ;; CHECK:      (rec
    ;; CHECK-NEXT:  (type $X.vtable (sub (struct )))
    (type $X.vtable (sub (struct)))

    ;; CHECK:       (type $A.vtable (sub $X.vtable (struct )))
    (type $A.vtable (sub $X.vtable (struct)))

    ;; CHECK:       (type $B.vtable (sub $X.vtable (struct )))
    (type $B.vtable (sub $X.vtable (struct)))

    ;; CHECK:       (type $X (sub (struct (field (ref $X.vtable)))))
    (type $X (sub (struct (field (ref $X.vtable)))))

    ;; CHECK:       (type $A (sub $X (struct (field (ref $A.vtable)))))
    (type $A (sub $X (struct (field (ref $A.vtable)))))

    ;; CHECK:       (type $B (sub $X (struct (field (ref $B.vtable)))))
    (type $B (sub $X (struct (field (ref $B.vtable)))))
  )

  ;; CHECK:      (type $6 (func))

  ;; CHECK:      (type $7 (func (result anyref)))

  ;; CHECK:      (import "a" "b" (func $import (type $7) (result anyref)))
  (import "a" "b" (func $import (result anyref)))

  ;; CHECK:      (global $X.vtable (ref $X.vtable) (struct.new_default $X.vtable))
  (global $X.vtable (ref $X.vtable) (struct.new $X.vtable))

  ;; CHECK:      (global $A.vtable (ref $A.vtable) (struct.new_default $A.vtable))
  (global $A.vtable (ref $A.vtable) (struct.new $A.vtable))

  ;; CHECK:      (global $B.vtable (ref $B.vtable) (struct.new_default $B.vtable))
  (global $B.vtable (ref $B.vtable) (struct.new $B.vtable))

  ;; CHECK:      (func $create (type $6)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new $X
  ;; CHECK-NEXT:    (global.get $X.vtable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new $A
  ;; CHECK-NEXT:    (global.get $A.vtable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new $B
  ;; CHECK-NEXT:    (global.get $B.vtable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $create
    (drop
      (struct.new $X
        (global.get $X.vtable)
      )
    )
    (drop
      (struct.new $A
        (global.get $A.vtable)
      )
    )
    (drop
      (struct.new $B
        (global.get $B.vtable)
      )
    )
  )

  ;; CHECK:      (func $test (type $6)
  ;; CHECK-NEXT:  (local $x (ref $X))
  ;; CHECK-NEXT:  (local.set $x
  ;; CHECK-NEXT:   (ref.cast (ref $X)
  ;; CHECK-NEXT:    (call $import)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.test (ref $A)
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.test (ref $B)
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.test (ref $A)
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.test (ref $B)
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test
    (local $x (ref $X))
    (local.set $x
      (ref.cast (ref $X)
        (call $import)
      )
    )
    ;; The import contains an unknown value. Testing if it is an object with
    ;; $A's vtable can be replaced by testing if it is $A, directly.
    (drop
      (ref.test (ref $A.vtable)
        (struct.get $X 0
          (local.get $x)
        )
      )
    )
    ;; Ditto, with $B.
    (drop
      (ref.test (ref $B.vtable)
        (struct.get $X 0
          (local.get $x)
        )
      )
    )
    ;; For completion, tests of the other types, which are unoptimizable.
    (drop
      (ref.test (ref $X)
        (struct.get $X 0
          (local.get $x)
        )
      )
    )
    (drop
      (ref.test (ref $A)
        (local.get $x)
      )
    )
    (drop
      (ref.test (ref $B)
        (local.get $x)
      )
    )
  )
)
