(module
 (type $none_=>_none (func))
<<<<<<< HEAD
 (type $none_=>_i32_externref_f64_i32_f64 (func (result i32 externref f64 i32 f64)))
 (type $none_=>_eqref_v128_externref (func (result eqref v128 externref)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_f32_=>_none (func (param i32 f32)))
=======
 (type $none_=>_i32 (func (result i32)))
>>>>>>> origin/master
 (type $i64_=>_none (func (param i64)))
 (type $i32_=>_none (func (param i32)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $exnref_=>_none (func (param exnref)))
<<<<<<< HEAD
 (type $eqref_externref_funcref_=>_none (func (param eqref externref funcref)))
 (type $i31ref_=>_none (func (param i31ref)))
 (type $none_=>_i32 (func (result i32)))
 (type $i31ref_i31ref_i64_f64_externref_=>_i32 (func (param i31ref i31ref i64 f64 externref) (result i32)))
 (type $f64_=>_i32_externref_f64_i32_f64 (func (param f64) (result i32 externref f64 i32 f64)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $funcref_=>_funcref (func (param funcref) (result funcref)))
 (type $none_=>_exnref (func (result exnref)))
 (type $i64_=>_exnref (func (param i64) (result exnref)))
 (type $f64_externref_exnref_i64_=>_exnref (func (param f64 externref exnref i64) (result exnref)))
 (type $f64_exnref_exnref_funcref_i32_=>_exnref (func (param f64 exnref exnref funcref i32) (result exnref)))
 (type $exnref_f64_i32_=>_i31ref (func (param exnref f64 i32) (result i31ref)))
=======
 (type $funcref_f64_=>_i32 (func (param funcref f64) (result i32)))
 (type $none_=>_f32 (func (result f32)))
 (type $eqref_i32_=>_funcref (func (param eqref i32) (result funcref)))
 (type $i32_i32_f32_exnref_=>_externref (func (param i32 i32 f32 exnref) (result externref)))
 (type $externref_f64_f32_eqref_i31ref_anyref_=>_externref (func (param externref f64 f32 eqref i31ref anyref) (result externref)))
 (type $exnref_f32_i31ref_externref_funcref_i31ref_i64_=>_exnref (func (param exnref f32 i31ref externref funcref i31ref i64) (result exnref)))
 (type $none_=>_eqref_i31ref_i64_v128_eqref (func (result eqref i31ref i64 v128 eqref)))
 (type $v128_i31ref_=>_eqref_i31ref_i64_v128_eqref (func (param v128 i31ref) (result eqref i31ref i64 v128 eqref)))
 (type $none_=>_i31ref (func (result i31ref)))
>>>>>>> origin/master
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
<<<<<<< HEAD
 (table $0 9 9 funcref)
 (elem (i32.const 0) $func_9 $func_11 $func_11 $func_19 $func_23 $func_25 $func_25 $func_25 $func_30)
=======
 (table $0 5 5 funcref)
 (elem (i32.const 0) $func_9 $func_9 $func_9 $func_10 $func_14)
>>>>>>> origin/master
 (global $global$5 (mut eqref) (ref.null eq))
 (global $global$4 (mut i32) (i32.const 470177031))
 (global $global$3 (mut f64) (f64.const 2147483647))
 (global $global$2 (mut (eqref f32 eqref funcref funcref i64)) (tuple.make
  (ref.null eq)
  (f32.const -2147483648)
  (ref.null eq)
  (ref.null func)
  (ref.null func)
  (i64.const -32)
 ))
 (global $global$1 (mut f32) (f32.const -32769))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_7_invoker" (func $func_7_invoker))
<<<<<<< HEAD
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_11" (func $func_11))
 (export "func_12" (func $func_12))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "func_14_invoker" (func $func_14_invoker))
 (export "func_16" (func $func_16))
 (export "func_16_invoker" (func $func_16_invoker))
 (export "func_19" (func $func_19))
 (export "func_21" (func $func_21))
 (export "func_21_invoker" (func $func_21_invoker))
 (export "func_23" (func $func_23))
 (export "func_23_invoker" (func $func_23_invoker))
 (export "func_26" (func $func_26))
 (export "func_26_invoker" (func $func_26_invoker))
 (export "func_28" (func $func_28))
 (export "func_28_invoker" (func $func_28_invoker))
 (export "func_31" (func $func_31))
=======
 (export "func_9" (func $func_9))
 (export "func_11_invoker" (func $func_11_invoker))
 (export "func_14" (func $func_14))
 (export "func_18" (func $func_18))
<<<<<<< HEAD
>>>>>>> origin/master
=======
 (export "func_19" (func $func_19))
>>>>>>> origin/master
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_7
  (local $0 v128)
  (local $1 i31ref)
  (local $2 funcref)
  (local $3 anyref)
  (local $4 exnref)
  (local $5 f32)
  (local $6 (f64 v128 i32))
  (local $7 f64)
  (local $8 (externref funcref externref i31ref i32 anyref))
  (local $9 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_7_invoker
  (call $func_7)
  (call $func_7)
  (call $log-i32
   (call $hashMemory)
  )
  (call $func_7)
 )
 (func $func_9 (param $0 i31ref)
  (local $1 funcref)
  (local $2 (i64 i31ref funcref f32 i32 v128))
  (local $3 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (nop)
 )
 (func $func_9_invoker
  (call $func_9
   (i31.new
    (i32.const -2147483647)
   )
  )
  (call $func_9
   (i31.new
    (i32.const 65)
   )
  )
  (call $func_9
   (i31.new
    (i32.const 67108863)
   )
  )
 )
 (func $func_11
  (local $0 (funcref f64 f64 v128))
  (local $1 f32)
  (local $2 (eqref funcref i64 v128 i31ref i31ref))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (nop)
  )
 )
 (func $func_12 (param $0 f64) (param $1 externref) (param $2 exnref) (param $3 i64) (result exnref)
  (local $4 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $2)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null exn)
 )
 (func $func_12_invoker
  (drop
   (call $func_12
    (f64.const -nan:0xfffffffffff94)
    (ref.null extern)
    (ref.null exn)
    (i64.const 487789586)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_14 (param $0 funcref) (result funcref)
  (local $1 externref)
  (local $2 funcref)
  (local $3 i32)
  (local $4 (f32 i32))
  (local $5 (i64 f32 i64))
  (local $6 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null func)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.tee $0
   (local.get $0)
  )
 )
 (func $func_14_invoker
  (drop
   (call $func_14
    (ref.null func)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_14
    (ref.null func)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_14
    (ref.null func)
   )
  )
 )
 (func $func_16
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (atomic.fence)
 )
 (func $func_16_invoker
  (call $func_16)
  (call $log-i32
   (call $hashMemory)
  )
  (call $func_16)
 )
 (func $func_18 (param $0 eqref) (param $1 externref) (param $2 funcref)
  (local $3 f32)
  (local $4 i32)
  (local $5 funcref)
  (local $6 i64)
  (local $7 externref)
  (local $8 (exnref f64))
  (local $9 (anyref f64 f64))
  (local $10 (i64 i32 eqref exnref))
  (local $11 (v128 i64 funcref i32 anyref anyref))
  (local $12 (i32 eqref f64 funcref))
  (local $13 eqref)
  (local $14 exnref)
  (local $15 anyref)
  (local $16 funcref)
  (local $17 (anyref v128 i64 f32 f32))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call_indirect (type $none_=>_none)
   (i32.const 2)
  )
 )
 (func $func_19 (param $0 f64) (param $1 exnref) (param $2 exnref) (param $3 funcref) (param $4 i32) (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (tuple.extract 2
   (tuple.make
    (v128.const i32x4 0x25022901 0x00190b6b 0x05005e01 0x18010029)
    (ref.null extern)
    (ref.null exn)
    (ref.null extern)
   )
  )
 )
 (func $func_20 (param $0 exnref) (param $1 f64) (param $2 i32) (result i31ref)
  (local $3 externref)
  (local $4 eqref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i31.new
      (i32.const 134217727)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block $label$1
    (nop)
    (data.drop 0)
   )
   (return
    (block $label$2 (result i31ref)
     (nop)
     (if (result i31ref)
      (i31.get_s
       (i31.new
        (if (result i32)
         (i32.eqz
          (i32.const 2)
         )
         (i32.const -536870911)
         (block $label$17
          (nop)
          (return
           (i31.new
            (i32.const -15)
           )
          )
         )
        )
       )
      )
      (block $label$18
       (call $log-i32
        (call $hashMemory)
       )
       (return
        (i31.new
         (i32.const -76)
        )
       )
      )
      (i31.new
       (i32.const 65466)
      )
     )
    )
   )
  )
 )
 (func $func_21 (result eqref v128 externref)
  (local $0 exnref)
  (local $1 v128)
  (local $2 exnref)
  (local $3 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (tuple.make
      (ref.null eq)
      (v128.const i32x4 0x00005600 0x1d01004a 0x4a800113 0x20ffff26)
      (ref.null extern)
     )
=======
     (local.get $0)
>>>>>>> origin/master
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (tuple.make
   (ref.null eq)
   (v128.const i32x4 0x00000060 0x00000000 0x50701e4a 0x0d131616)
   (ref.null extern)
  )
 )
<<<<<<< HEAD
 (func $func_21_invoker
  (drop
   (call $func_21)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_21)
  )
  (call $log-i32
   (call $hashMemory)
=======
 (func $func_15 (result i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 32768)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
>>>>>>> origin/master
  )
  (global.get $global$4)
 )
<<<<<<< HEAD
 (func $func_23 (param $0 i32) (param $1 f32)
  (local $2 f64)
  (local $3 (f32 exnref externref eqref))
  (local $4 (anyref f32 f32 i64 anyref))
=======
 (func $func_16 (param $0 eqref) (param $1 i32) (result funcref)
  (local $2 v128)
  (local $3 funcref)
  (local $4 eqref)
>>>>>>> origin/master
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
<<<<<<< HEAD
=======
    (return
     (local.get $3)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (loop $label$1 (result funcref)
   (block
    (if
     (i32.eqz
      (global.get $hangLimit)
     )
     (return
      (local.get $3)
     )
    )
    (global.set $hangLimit
     (i32.sub
      (global.get $hangLimit)
      (i32.const 1)
     )
    )
   )
   (block (result funcref)
    (block $label$2
     (br_if $label$2
      (i32.eqz
       (block $label$3
        (global.set $global$4
         (local.tee $1
          (local.get $1)
         )
        )
        (block $label$4
         (nop)
         (br_if $label$1
          (i32.eqz
           (i31.get_u
            (i31.new
             (i32.const -90)
            )
           )
          )
         )
        )
        (br $label$1)
       )
      )
     )
     (memory.init 0
      (i32.and
       (local.get $1)
       (i32.const 15)
      )
      (i32.const 16)
      (i32.const 3)
     )
    )
    (br_if $label$1
     (i32.const 131071)
    )
    (local.get $3)
   )
  )
 )
 (func $func_17 (param $0 i64)
  (local $1 externref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
>>>>>>> origin/master
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i32
    (call $hashMemory)
   )
<<<<<<< HEAD
   (nop)
  )
 )
 (func $func_23_invoker
  (call $func_23
   (i32.const 2147483647)
   (f32.const 231)
  )
 )
 (func $func_25 (result exnref)
  (local $0 funcref)
  (local $1 externref)
  (local $2 v128)
  (local $3 anyref)
  (local $4 externref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
=======
   (if
    (i32.eqz
     (f64.gt
      (f64.const 103)
      (f64.max
       (f64.const 8388607.124)
       (if
        (i32.eqz
         (global.get $global$4)
        )
        (block $label$1
         (call $log-v128
          (f64x2.replace_lane 0
           (f32x4.neg
            (i8x16.shr_u
             (v128.load offset=3
              (i32.const 65535)
             )
             (loop $label$2 (result i32)
              (block
               (if
                (i32.eqz
                 (global.get $hangLimit)
                )
                (return)
               )
               (global.set $hangLimit
                (i32.sub
                 (global.get $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (block (result i32)
               (block $label$3
                (call $log-exnref
                 (ref.null exn)
                )
                (call $log-i32
                 (i32.atomic.rmw8.sub_u offset=22
                  (i32.and
                   (i32.const 6)
                   (i32.const 15)
                  )
                  (i32.const 1852667194)
                 )
                )
               )
               (br_if $label$2
                (tuple.extract 0
                 (tuple.make
                  (i32.const -2147483648)
                  (i31.new
                   (i32.const -32767)
                  )
                 )
                )
               )
               (i32.const -2147483648)
              )
             )
            )
           )
           (f64.const -nan:0xffffffffffff3)
          )
         )
         (br $label$0)
        )
        (block $label$4
         (br_if $label$0
          (i32.eqz
           (tuple.extract 2
            (block $label$5
             (call $log-i32
              (call $hashMemory)
             )
             (br $label$0)
            )
           )
          )
         )
         (br $label$0)
        )
       )
      )
     )
    )
    (block $label$6
     (call $log-i32
      (call $hashMemory)
     )
     (call $log-i32
      (call $hashMemory)
     )
    )
    (if
     (i32.eqz
      (i32.or
       (i32.const 65535)
       (i32.const 8)
      )
     )
     (call $log-i32
      (i32.const 608321884)
     )
     (atomic.fence)
>>>>>>> origin/master
    )
   )
  )
  (ref.null exn)
 )
<<<<<<< HEAD
 (func $func_26 (param $0 f64) (result i32 externref f64 i32 f64)
  (local $1 exnref)
  (local $2 (v128 f32 f32 anyref externref))
=======
 (func $func_18 (param $0 v128) (param $1 i31ref) (result eqref i31ref i64 v128 eqref)
  (local $2 i64)
  (local $3 v128)
  (local $4 f32)
>>>>>>> origin/master
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
<<<<<<< HEAD
      (i32.const 980893223)
      (ref.null extern)
      (f64.const 2.8471089363605166e-207)
      (i32.const 0)
      (f64.const 4.4810100463055276e-260)
=======
      (ref.null eq)
      (i31.new
       (i32.const -2147483648)
      )
      (i64.const 369041285507055655)
      (v128.const i32x4 0xffffffd1 0xffffffff 0x25312936 0x5455263f)
      (ref.null eq)
>>>>>>> origin/master
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (block $label$0 (result i32 externref f64 i32 f64)
   (nop)
   (tuple.make
    (i32.const 167772165)
    (ref.null extern)
    (f64.const 880011477617473924425473e200)
    (i32.const -255)
    (f64.const -4398046511103.266)
   )
  )
 )
 (func $func_26_invoker
  (drop
   (call $func_26
    (f64.const -2199023255552)
   )
  )
 )
 (func $func_28 (param $0 f64) (result f64)
  (local $1 (i64 i31ref exnref i31ref anyref))
  (local $2 v128)
  (local $3 (i31ref f32 eqref i31ref i32 funcref))
  (local $4 anyref)
=======
  (tuple.make
   (ref.null eq)
   (local.get $1)
   (i64.const -32766)
   (v128.bitselect
    (local.get $3)
    (block $label$2
     (atomic.fence)
     (return
      (tuple.make
       (ref.null eq)
       (i31.new
        (i32.const 19521)
       )
       (i64.const -32766)
       (v128.const i32x4 0x4f800000 0x3e116873 0x46ca0800 0x54000000)
       (ref.null eq)
      )
     )
    )
    (tuple.extract 2
     (tuple.make
      (i31.new
       (i32.const 1684216173)
      )
      (ref.null eq)
      (v128.const i32x4 0xffa20004 0x00000000 0x2b25ffa6 0x005b0080)
      (ref.null eq)
     )
    )
   )
   (global.get $global$5)
  )
 )
 (func $func_19 (param $0 funcref) (param $1 f64) (result i32)
  (local $2 (funcref f32 exnref exnref externref))
  (local $3 externref)
  (local $4 v128)
  (local $5 f64)
  (local $6 i32)
  (local $7 (f64 i31ref eqref eqref))
  (local $8 anyref)
  (local $9 (eqref i31ref i32 i31ref anyref))
  (local $10 eqref)
  (local $11 exnref)
  (local $12 externref)
  (local $13 externref)
  (local $14 externref)
  (local $15 i31ref)
>>>>>>> origin/master
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
<<<<<<< HEAD
     (local.get $0)
=======
     (i32.const 2147483647)
>>>>>>> origin/master
=======
     (i32.const -131072)
>>>>>>> origin/master
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (loop $label$15 (result f64)
   (block
    (if
     (i32.eqz
      (global.get $hangLimit)
     )
     (return
      (f64.const -nan:0xfffffffffffed)
     )
    )
    (global.set $hangLimit
     (i32.sub
      (global.get $hangLimit)
      (i32.const 1)
     )
    )
   )
   (block (result f64)
    (loop $label$16
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (f64.const -33554431.863)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
=======
  (select
   (i32.atomic.load8_u offset=22
    (i32.and
     (local.get $6)
     (i32.const 15)
    )
   )
   (local.tee $6
    (select
     (i16x8.extract_lane_s 4
      (v128.const i32x4 0xfffffff8 0x00008001 0xffffffa0 0x180b1217)
     )
     (if (result i32)
      (if (result i32)
       (i32.eqz
        (i32.const 524287)
       )
       (block $label$1
        (memory.init 0
         (i32.and
          (f32.ge
           (block $label$2 (result f32)
            (call $log-i32
             (call $hashMemory)
            )
            (if (result f32)
             (if (result i32)
              (i32.eqz
               (loop $label$3 (result i32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (i32.const -83)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result i32)
                 (br_if $label$3
                  (local.get $6)
                 )
                 (br_if $label$3
                  (local.get $6)
                 )
                 (i32.const -33)
                )
               )
              )
              (i32.const 2147483647)
              (if (result i32)
               (i32.eqz
                (i32.const 32768)
               )
               (i32.const 16404)
               (i32.const -1024)
              )
             )
             (f32.const -nan:0x7fffa8)
             (block $label$4 (result f32)
              (call $log-i32
               (call $hashMemory)
              )
              (f32.const 18446744073709551615)
             )
            )
           )
           (if (result f32)
            (i32.eqz
             (ref.is_null
              (if (result externref)
               (i32.eqz
                (i32.const -65535)
               )
               (ref.null extern)
               (local.get $12)
              )
             )
            )
            (block $label$5 (result f32)
             (call $log-f32
              (select
               (f32.const 4096)
               (f32.const -nan:0x7fffa1)
               (i32.const 2097640319)
              )
             )
             (f32.const 8192)
            )
            (f32.const -1125899906842624)
           )
          )
          (i32.const 15)
         )
         (i32.const 1)
         (i32.const 2)
        )
        (return
         (local.get $6)
        )
       )
       (block $label$6 (result i32)
        (loop $label$7
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return
            (i32.const -4096)
           )
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$8
          (nop)
          (memory.fill
           (i32.and
            (i8x16.extract_lane_s 11
             (i8x16.max_s
              (local.get $4)
              (i16x8.add_saturate_u
               (v128.const i32x4 0xffea0f4a 0xfdffffec 0xdfff0512 0x1910ffff)
               (local.get $4)
              )
             )
            )
            (i32.const 15)
           )
           (i32.const 1326258715)
           (local.get $6)
          )
         )
        )
<<<<<<< HEAD
>>>>>>> origin/master
=======
        (local.get $6)
>>>>>>> origin/master
       )
      )
      (block $label$9 (result i32)
       (i32.const 10353)
      )
      (local.get $6)
     )
<<<<<<< HEAD
     (block $label$17
      (call $log-i32
       (i32.const 1802201963)
      )
      (call $log-f32
       (f32.load offset=4 align=2
        (i32.and
         (i32.const -8388607)
         (i32.const 15)
        )
       )
      )
     )
    )
    (br_if $label$15
     (i32.const -64)
    )
    (f64.mul
     (local.get $0)
     (f64x2.extract_lane 1
      (tuple.extract 3
       (tuple.make
        (ref.null extern)
        (ref.null extern)
        (f32.const 26)
        (v128.const i32x4 0x7fff4600 0x000c0101 0xff131450 0x00770100)
        (ref.null exn)
        (i31.new
         (i32.const -2147483648)
        )
       )
      )
     )
    )
   )
  )
 )
 (func $func_28_invoker
  (drop
   (call $func_28
    (f64.const -nan:0xffffffffffff1)
   )
  )
  (drop
   (call $func_28
    (f64.const 562949953421311.44)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_28
    (f64.const -64)
   )
  )
  (drop
   (call $func_28
    (f64.const -96)
   )
  )
 )
 (func $func_30 (param $0 i64) (result exnref)
  (local $1 i31ref)
  (local $2 eqref)
  (local $3 externref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result exnref)
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (ref.null exn)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (loop $label$2
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (ref.null exn)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
=======
     (select
      (i32.const 33554433)
      (i32.trunc_f64_s
       (f64.const 3402823466385288598117041e14)
      )
      (local.tee $6
       (select
        (local.get $6)
        (ref.eq
         (loop $label$0 (result i31ref)
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return
             (i32.const -32768)
            )
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block (result i31ref)
           (local.set $5
            (f64.const 371920655)
           )
           (br_if $label$0
            (i32.eqz
             (local.tee $6
              (local.tee $6
               (local.tee $6
                (local.tee $6
                 (local.get $6)
                )
               )
              )
             )
            )
           )
           (local.get $15)
          )
         )
<<<<<<< HEAD
>>>>>>> origin/master
=======
         (local.get $10)
>>>>>>> origin/master
        )
        (local.get $6)
       )
      )
      (block $label$3
       (nop)
      )
     )
     (br_if $label$1
      (i32.const 1364349189)
     )
     (call $func_23
      (i32.const 72811345)
      (global.get $global$1)
     )
    )
   )
   (ref.null exn)
  )
 )
 (func $func_31 (param $0 i31ref) (param $1 i31ref) (param $2 i64) (param $3 f64) (param $4 externref) (result i32)
  (local $5 v128)
  (local $6 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 7689)
    )
   )
<<<<<<< HEAD
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (return
   (i32.const -254)
=======
   (global.get $global$4)
>>>>>>> origin/master
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
